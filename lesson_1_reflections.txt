1. 查看文件的两个版本之间的差异如何帮助你了解引入的错误？

通过新旧版本的对比，可以快速定位新旧版本的不同之处，而不同之处极有可能是错误出现的地方。

2. 从长远来看，能轻松访问文件的整个历史记录将如何提高编程者的效率？

可以通过新旧版本对比明确文件修改的地方，当新版本修改后效果明显优化/变差，可以快速定位，通过记录可以充分利用过去的经验，减少重复工作。

3. 你认为，手动选择何时创建提交（像在Git中做的那样）与自动保存版本（如 Google Docs 所做的那样）各有何优缺点？

手动提交优点：可以保存出现关键修改内容的版本，避免版本冗杂
        缺点：一旦忘记提交，修改后的版本可能丢失
自动保存优点：减少因为忘记提交造成文件丢失的情况
        缺点：造成相同版本或相似版本重复或频繁提交

4. 你认为一些版本控制系统（例如Git）允许在一次提交中保存多个文件，而其他系统（例如 Google Docs）单独对待每个文件？

一次提交保存多个文件适用于关联性较强的多文件，而单独对待每个文件适用于单文件独立性较强的情况

5. 如何使用命令 git log 和 git diff 来查看文件的历史记录？

git log: 直接cd进入该文件，键入git log，可在后面加入 --stat查看每次commit行数的整体增减情况
git diff: cd进入该文件，键入git diff +序列号 +序列号，注意新的commit的版本出现在git log页面的上方，旧版本在下方，序列号可以不用完全复制，只需复制前4个以上字母或数字

6. 使用版本控制，如何让你更有信心进行有可能会造成破坏的更改？

通过往回逐项commit检查，可以找到最初出现bug的版本，进而通过git diff找出导致bug出现的语句

7. 现在你已设置了工作空间，你想尝试使用 Git 来做些什么？

比较不同commit之间的异同，确定改进/出错的步骤，同时可以对现有commit进行大幅度的调整更改